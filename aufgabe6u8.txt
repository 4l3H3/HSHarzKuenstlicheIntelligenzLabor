:- use_module(library(clpfd)).
loesung :-
   path([3,3,s],[0,0,z],[[3,3,s]],MoveList),
   nl,nl,printMoveList(MoveList).
printMoveList([]) :- nl, nl.
printMoveList([[A,B,Desc]|T]) :-
   write(A), write(' --> '), write(B), write('  by  '), write(Desc), nl,
   printMoveList(T).


path([A,B,C],[A,B,C],_,[]).

path([A,B,C],[D,s,F],Visited,Moves) :-
   move([A,B,C],[I,J,K],Description),
   write('Try move '), write([I,J,K]), 
       write(' '), write(Description), nl,
   safe([I,J,K]),  % Don't use this move unless it's safe.
   not(member([I,J,K],Visited)),  % Don't reuse a move.
   path([I,J,K],[D,s,F],[[I,J,K]|Visited],MoreMoves),
   Moves = [ [[A,B,C],[I,J,K],Description] | MoreMoves ].
   
move([A,B,s],[C,B,z],'One cannibal rows across') :-
   A > 0, C is A - 1.
move([A,B,s],[C,B,z],'Two cannibal row across') :-
   A > 1, C is A - 2.
move([A,B,s],[C,D,z],'One cannibals and one missionary row across') :-
   A > 0, B > 0, C is A - 1, D is B - 1.
move([A,B,s],[A,D,z],'One missionary rows across') :-
   B > 0, D is B - 1.
move([A,B,s],[A,D,z],'Two missionaries row across') :-
   B > 1, D is B - 2.

move([A,B,z],[C,B,s],'One cannibal rows back') :-
   A < 3, C is A + 1.
move([A,B,z],[C,B,s],'Two cannibals row back') :-
   A < 2, C is A + 2.
move([A,B,z],[C,D,s],'One cannibal and one missionary row back') :-
   A < 3, B < 3, C is A + 1, D is B + 1.
move([A,B,z],[A,D,s],'One missionary rows back') :-
   B < 3, D is B + 1.
move([A,B,z],[A,D,s],'Two missionaries row back') :-
   B < 2, D is B + 2.
safe([A,B,_]) :-
   (B =< A ; A = 0),
   C is 3-B, D is 3-A,
   (D =< C; C = 0).


loesung(L):- 	digit(S), S#\=0, digit(E), digit(N), digit(D),
		digit(M), M#\=0, digit(O), digit(R), digit(Y),
		1000*S+100*E+10*N+D+1000*M+100*O+10*R+E #= 10000*M+1000*O+100*N+10*E+Y, L = [S,s,N,D,M,O,R,Y],
		different(L).

different([]).
different([X|R]):- not(member(X,R)), different(R).

digit(0).
digit(1).
digit(2).
digit(3).
digit(4).
digit(5).
digit(6).
digit(7).
digit(8).
digit(9).

%111.125sec
